// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String
  username    String?
  avatarUrl   String?
  dateOfBirth DateTime?
  createdAt   DateTime  @default(now())
  bio         String?
  location    String?
  posts       Post[]
  likes       Like[]
  dislike     Dislike[]
  comments    Comment[]
  followers   Follows[] @relation("following")
  following   Follows[] @relation("follower")
  topics  TopicSubs[] @relation("topicFollower")
  
}

model Follows {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  follower     User      @relation("follower", fields: [followerId], references: [id])
  followerId   String    @db.ObjectId
  following    User      @relation("following", fields: [followingId], references: [id])
  followingId  String    @db.ObjectId
}

model Topic {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  topicSubs     TopicSubs[]
  posts         Post[]
}

model TopicSubs {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  topic         Topic     @relation(fields: [topicId], references: [id])
  topicId       String    @db.ObjectId
  follower      User      @relation("topicFollower", fields: [followerId], references: [id])
  followerId    String    @db.ObjectId

}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  likes     Like[]
  dislikes   Dislike[]
  comments  Comment[]
  createdAt DateTime  @default(now())
  topic     Topic?    @relation(fields: [topicId], references: [id])
  topicId   String?   @db.ObjectId
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  posts  Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Dislike {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  posts  Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}

model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  posts   Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
}
